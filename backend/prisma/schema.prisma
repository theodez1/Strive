generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model User {
  id              String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email           String               @unique @db.VarChar(255)
  username        String               @unique @db.VarChar(50)
  firstName       String               @map("first_name") @db.VarChar(100)
  lastName        String               @map("last_name") @db.VarChar(100)
  birthDate       DateTime?            @map("birth_date") @db.Date
  region          String?              @db.VarChar(100)
  phoneNumber     String?              @map("phone_number") @db.VarChar(20)
  favoriteSports  String[]             @default([]) @map("favorite_sports")
  ratingAverage   Decimal?             @default(0.00) @map("rating_average") @db.Decimal(3, 2)
  ratingCount     Int?                 @default(0) @map("rating_count")
  stats           Json?                @default("{}")
  preferences     Json?                @default("{}")
  deviceTokens      String[]             @default([]) @map("device_tokens")
  profilePictureUrl String?              @map("profile_picture_url")
  createdAt         DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?            @default(now()) @map("updated_at") @db.Timestamptz(6)
  organizedEvents Event[]              @relation("EventOrganizer")
  sentMessages    Message[]
  notifications   Notification[]
  participations  Participant[]
  pendingRequests PendingParticipant[]
  reviewsGiven    Review[]             @relation("Reviewer")
  reviewsReceived Review[]             @relation("ReviewedUser")

  @@map("users")
  @@schema("public")
}

model Event {
  id              String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String               @db.VarChar(200)
  sport           String
  locationName    String               @map("location_name") @db.VarChar(200)
  locationAddress String               @map("location_address")
  locationCity    String               @map("location_city") @db.VarChar(100)
  locationCountry String               @map("location_country") @db.VarChar(100)
  latitude        Decimal              @db.Decimal(10, 8)
  longitude       Decimal              @db.Decimal(11, 8)
  dateTime        DateTime             @map("date_time") @db.Timestamptz(6)
  duration        Int
  totalSlots      Int                  @map("total_slots")
  availableSlots  Int                  @map("available_slots")
  organizerId     String               @map("organizer_id") @db.Uuid
  organizerSlots  Int?                 @default(1) @map("organizer_slots")
  description     String?
  price           Decimal?             @db.Decimal(10, 2)
  levels          String[]             @default(["all"])
  createdAt       DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?            @default(now()) @map("updated_at") @db.Timestamptz(6)
  conversation    Conversation?
  organizer       User                 @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  participants    Participant[]
  pendingRequests PendingParticipant[]

  @@index([locationCity], map: "idx_events_city")
  @@index([dateTime], map: "idx_events_date")
  @@index([latitude, longitude], map: "idx_events_location")
  @@map("events")
  @@schema("public")
}

model Participant {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  eventId   String    @map("event_id") @db.Uuid
  guests    Int?      @default(0)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, eventId])
  @@index([eventId], map: "idx_participants_event")
  @@index([userId], map: "idx_participants_user")
  @@map("participants")
  @@schema("public")
}

model PendingParticipant {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  eventId     String    @map("event_id") @db.Uuid
  guests      Int?      @default(0)
  comment     String?
  requestedAt DateTime? @default(now()) @map("requested_at") @db.Timestamptz(6)
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, eventId])
  @@index([eventId], map: "idx_pending_participants_event")
  @@index([userId], map: "idx_pending_participants_user")
  @@map("pending_participants")
  @@schema("public")
}

model Conversation {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventId       String    @unique @map("event_id") @db.Uuid
  lastMessageId String?   @map("last_message_id") @db.Uuid
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  event         Event     @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages      Message[]

  @@map("conversations")
  @@schema("public")
}

model Message {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  senderId       String       @map("sender_id") @db.Uuid
  content        String
  type           String?      @default("text") @db.VarChar(50)
  read           Boolean      @default(false)
  createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([conversationId], map: "idx_messages_conversation")
  @@index([read], map: "idx_messages_read")
  @@index([conversationId, read], map: "idx_messages_conversation_read")
  @@map("messages")
  @@schema("public")
}

model Notification {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  type      String    @db.VarChar(100)
  title     String    @db.VarChar(200)
  body      String
  data      Json?
  readAt    DateTime? @map("read_at") @db.Timestamptz(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_notifications_user")
  @@index([createdAt], map: "idx_notifications_created")
  @@map("notifications")
  @@schema("public")
}

model Review {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reviewerId      String    @map("reviewer_id") @db.Uuid
  reviewedUserId  String    @map("reviewed_user_id") @db.Uuid
  eventId         String    @map("event_id") @db.Uuid
  rating          Int       @db.SmallInt
  comment         String?
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  reviewer        User      @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reviewedUser    User      @relation("ReviewedUser", fields: [reviewedUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([reviewerId, eventId])
  @@index([reviewedUserId], map: "idx_reviews_reviewed_user")
  @@index([eventId], map: "idx_reviews_event")
  @@map("reviews")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)

  @@schema("public")
}

